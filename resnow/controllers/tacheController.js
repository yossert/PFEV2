const Tache = require('../models/Tache');
const Project = require('../models/Project');

// Configuration des champs requis par type de t√¢che
const champsRequisParTache = {
  "Param√©trage Client": [
    "Nom_MMO", "Region_MMO", "MMO_brassage", "Reference_MSISDN", "Region_client",
    "Type_securisation", "Type_commande", "Adresse_postale",
    "Nom_contact_client_1", "Prenom_contact_client_1", "Telephone_fixe_contact_client_1",
    "Email_contact_client_1", "Contact_client_1"
  ],
  "Brassage": [
    "Nom_Brasseur", "Date_braissage", "Cable_utilis√©"
  ],
  "Configuration": [
    "Equipement_configur√©", "IP_assign√©e", "Login_config"
  ],
  "RDV Client": [
    "Date_RDV", "Heure_RDV", "Client_confirm√©"
  ]
};

// ‚úÖ Ouvrir une t√¢che
exports.ouvrirTache = async (req, res) => {
  try {
    const { id } = req.params;
    const tache = await Tache.findById(id).populate('tachePrecedente');

    if (!tache) {
      return res.status(404).json({ message: 'T√¢che introuvable' });
    }

    // Emp√™cher si d√©j√† en cours ou termin√©e
    if (tache.etat === 'ouverte' || tache.etat === 'termin√©e') {
      return res.status(400).json({ message: 'T√¢che d√©j√† ouverte ou termin√©e' });
    }

    // V√©rifier que la t√¢che pr√©c√©dente est termin√©e (si elle existe)
    if (tache.tachePrecedente && tache.tachePrecedente.etat !== 'termin√©e') {
      return res.status(400).json({ message: 'La t√¢che pr√©c√©dente doit √™tre termin√©e.' });
    }

    // Passer la t√¢che √† "ouverte"
    tache.etat = 'ouverte';
    tache.dateDebut = new Date();
    await tache.save();

    res.json({ message: 'T√¢che ouverte avec succ√®s', tache });

  } catch (err) {
    res.status(500).json({ message: 'Erreur serveur', error: err.message });
  }
};

// ‚úÖ Fermer une t√¢che avec validation des champs requis
exports.fermerTache = async (req, res) => {
  try {
    const { id } = req.params;


    //
    //
    const { champs } = req.body;

    

    const tache = await Tache.findById(id);
    if (!tache) return res.status(404).json({ message: 'T√¢che introuvable' });

    if (tache.etat !== 'ouverte') {
      return res.status(400).json({ message: 'La t√¢che n\'est pas ouverte' });
    }

    // R√©cup√©ration du type/nom de la t√¢che (cl√© de v√©rification des champs)
    const nomTache = tache.nom || tache.type;
    const champsRequis = champsRequisParTache[nomTache];

    if (!champsRequis) {
      return res.status(400).json({ message: `Champs requis non d√©finis pour la t√¢che : ${nomTache}` });
    }

    // V√©rification que tous les champs requis sont pr√©sents et non vides
    for (const champ of champsRequis) {
      if (!champs[champ] || champs[champ].toString().trim() === "") {
        return res.status(400).json({ message: `Champ requis manquant : ${champ}` });
      }
    }

    // Mise √† jour de la t√¢che
    tache.champs = champs;
    tache.etat = 'termin√©e';
    tache.dateFin = new Date();
    tache.champsComplet = true;
    tache.pourcentageTermine = 100;
    await tache.save();

    // üîÅ Mise √† jour automatique du projet si c‚Äôest la t√¢che "Param√©trage Client"
    if (tache.nom === 'Param√©trage Client') {
      const {
        Nom_MMO: client,
        Reference_MSISDN: msisdn,
        Region_MMO: regionMMO
      } = champs;

      await Project.findByIdAndUpdate(tache.project, {
        client,
        msisdn,
        regionMMO
      });
    }

    // ‚úÖ V√©rifie si toutes les t√¢ches du projet sont termin√©es
    await updateProjectStatusIfCompleted(tache.project);

    res.json({ message: 'T√¢che ferm√©e avec succ√®s', tache });

  } catch (err) {
    res.status(500).json({ message: 'Erreur serveur', error: err.message });
  }
};

// ‚úÖ R√©cup√©rer toutes les t√¢ches d‚Äôun projet donn√©
exports.getTachesByProject = async (req, res) => {
  try {
    const { projectId } = req.params;
    const taches = await Tache.find({ project: projectId }).sort({ createdAt: 1 });
    res.status(200).json(taches);
  } catch (error) {
    res.status(500).json({ message: 'Erreur serveur', error });
  }
};

// ‚úÖ V√©rifie si toutes les t√¢ches d‚Äôun projet sont termin√©es, et met √† jour son statut
async function updateProjectStatusIfCompleted(projectId) {
  const taches = await Tache.find({ project: projectId });
  const allDone = taches.every(t => t.etat === 'termin√©e');

  if (allDone) {
    await Project.findByIdAndUpdate(projectId, { status: 'termine' });
  }
}




